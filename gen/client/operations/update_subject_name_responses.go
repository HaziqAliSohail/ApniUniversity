// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateSubjectNameReader is a Reader for the UpdateSubjectName structure.
type UpdateSubjectNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSubjectNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSubjectNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateSubjectNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSubjectNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /subject/{ID}/name] updateSubjectName", response, response.Code())
	}
}

// NewUpdateSubjectNameOK creates a UpdateSubjectNameOK with default headers values
func NewUpdateSubjectNameOK() *UpdateSubjectNameOK {
	return &UpdateSubjectNameOK{}
}

/*
UpdateSubjectNameOK describes a response with status code 200, with default header values.

Subject Name updated Successfully!
*/
type UpdateSubjectNameOK struct {
	Payload int64
}

// IsSuccess returns true when this update subject name o k response has a 2xx status code
func (o *UpdateSubjectNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update subject name o k response has a 3xx status code
func (o *UpdateSubjectNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subject name o k response has a 4xx status code
func (o *UpdateSubjectNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update subject name o k response has a 5xx status code
func (o *UpdateSubjectNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update subject name o k response a status code equal to that given
func (o *UpdateSubjectNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update subject name o k response
func (o *UpdateSubjectNameOK) Code() int {
	return 200
}

func (o *UpdateSubjectNameOK) Error() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/name][%d] updateSubjectNameOK  %+v", 200, o.Payload)
}

func (o *UpdateSubjectNameOK) String() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/name][%d] updateSubjectNameOK  %+v", 200, o.Payload)
}

func (o *UpdateSubjectNameOK) GetPayload() int64 {
	return o.Payload
}

func (o *UpdateSubjectNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSubjectNameNotFound creates a UpdateSubjectNameNotFound with default headers values
func NewUpdateSubjectNameNotFound() *UpdateSubjectNameNotFound {
	return &UpdateSubjectNameNotFound{}
}

/*
UpdateSubjectNameNotFound describes a response with status code 404, with default header values.

Subject not found!
*/
type UpdateSubjectNameNotFound struct {
}

// IsSuccess returns true when this update subject name not found response has a 2xx status code
func (o *UpdateSubjectNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subject name not found response has a 3xx status code
func (o *UpdateSubjectNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subject name not found response has a 4xx status code
func (o *UpdateSubjectNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update subject name not found response has a 5xx status code
func (o *UpdateSubjectNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update subject name not found response a status code equal to that given
func (o *UpdateSubjectNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update subject name not found response
func (o *UpdateSubjectNameNotFound) Code() int {
	return 404
}

func (o *UpdateSubjectNameNotFound) Error() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/name][%d] updateSubjectNameNotFound ", 404)
}

func (o *UpdateSubjectNameNotFound) String() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/name][%d] updateSubjectNameNotFound ", 404)
}

func (o *UpdateSubjectNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubjectNameInternalServerError creates a UpdateSubjectNameInternalServerError with default headers values
func NewUpdateSubjectNameInternalServerError() *UpdateSubjectNameInternalServerError {
	return &UpdateSubjectNameInternalServerError{}
}

/*
UpdateSubjectNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateSubjectNameInternalServerError struct {
}

// IsSuccess returns true when this update subject name internal server error response has a 2xx status code
func (o *UpdateSubjectNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subject name internal server error response has a 3xx status code
func (o *UpdateSubjectNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subject name internal server error response has a 4xx status code
func (o *UpdateSubjectNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update subject name internal server error response has a 5xx status code
func (o *UpdateSubjectNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update subject name internal server error response a status code equal to that given
func (o *UpdateSubjectNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update subject name internal server error response
func (o *UpdateSubjectNameInternalServerError) Code() int {
	return 500
}

func (o *UpdateSubjectNameInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/name][%d] updateSubjectNameInternalServerError ", 500)
}

func (o *UpdateSubjectNameInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/name][%d] updateSubjectNameInternalServerError ", 500)
}

func (o *UpdateSubjectNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UpdateSubjectNameBody update subject name body
swagger:model UpdateSubjectNameBody
*/
type UpdateSubjectNameBody struct {

	// name
	Name string `json:"Name,omitempty"`
}

// Validate validates this update subject name body
func (o *UpdateSubjectNameBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subject name body based on context it is used
func (o *UpdateSubjectNameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubjectNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubjectNameBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubjectNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
