// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssignSubjectToTeacherReader is a Reader for the AssignSubjectToTeacher structure.
type AssignSubjectToTeacherReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignSubjectToTeacherReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignSubjectToTeacherOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAssignSubjectToTeacherNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignSubjectToTeacherInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /teacher/{ID}/subject] assignSubjectToTeacher", response, response.Code())
	}
}

// NewAssignSubjectToTeacherOK creates a AssignSubjectToTeacherOK with default headers values
func NewAssignSubjectToTeacherOK() *AssignSubjectToTeacherOK {
	return &AssignSubjectToTeacherOK{}
}

/*
AssignSubjectToTeacherOK describes a response with status code 200, with default header values.

Subject assigned to Teacher
*/
type AssignSubjectToTeacherOK struct {
	Payload int64
}

// IsSuccess returns true when this assign subject to teacher o k response has a 2xx status code
func (o *AssignSubjectToTeacherOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign subject to teacher o k response has a 3xx status code
func (o *AssignSubjectToTeacherOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign subject to teacher o k response has a 4xx status code
func (o *AssignSubjectToTeacherOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign subject to teacher o k response has a 5xx status code
func (o *AssignSubjectToTeacherOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign subject to teacher o k response a status code equal to that given
func (o *AssignSubjectToTeacherOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the assign subject to teacher o k response
func (o *AssignSubjectToTeacherOK) Code() int {
	return 200
}

func (o *AssignSubjectToTeacherOK) Error() string {
	return fmt.Sprintf("[PATCH /teacher/{ID}/subject][%d] assignSubjectToTeacherOK  %+v", 200, o.Payload)
}

func (o *AssignSubjectToTeacherOK) String() string {
	return fmt.Sprintf("[PATCH /teacher/{ID}/subject][%d] assignSubjectToTeacherOK  %+v", 200, o.Payload)
}

func (o *AssignSubjectToTeacherOK) GetPayload() int64 {
	return o.Payload
}

func (o *AssignSubjectToTeacherOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignSubjectToTeacherNotFound creates a AssignSubjectToTeacherNotFound with default headers values
func NewAssignSubjectToTeacherNotFound() *AssignSubjectToTeacherNotFound {
	return &AssignSubjectToTeacherNotFound{}
}

/*
AssignSubjectToTeacherNotFound describes a response with status code 404, with default header values.

Teacher not found!
*/
type AssignSubjectToTeacherNotFound struct {
}

// IsSuccess returns true when this assign subject to teacher not found response has a 2xx status code
func (o *AssignSubjectToTeacherNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign subject to teacher not found response has a 3xx status code
func (o *AssignSubjectToTeacherNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign subject to teacher not found response has a 4xx status code
func (o *AssignSubjectToTeacherNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign subject to teacher not found response has a 5xx status code
func (o *AssignSubjectToTeacherNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this assign subject to teacher not found response a status code equal to that given
func (o *AssignSubjectToTeacherNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the assign subject to teacher not found response
func (o *AssignSubjectToTeacherNotFound) Code() int {
	return 404
}

func (o *AssignSubjectToTeacherNotFound) Error() string {
	return fmt.Sprintf("[PATCH /teacher/{ID}/subject][%d] assignSubjectToTeacherNotFound ", 404)
}

func (o *AssignSubjectToTeacherNotFound) String() string {
	return fmt.Sprintf("[PATCH /teacher/{ID}/subject][%d] assignSubjectToTeacherNotFound ", 404)
}

func (o *AssignSubjectToTeacherNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignSubjectToTeacherInternalServerError creates a AssignSubjectToTeacherInternalServerError with default headers values
func NewAssignSubjectToTeacherInternalServerError() *AssignSubjectToTeacherInternalServerError {
	return &AssignSubjectToTeacherInternalServerError{}
}

/*
AssignSubjectToTeacherInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AssignSubjectToTeacherInternalServerError struct {
}

// IsSuccess returns true when this assign subject to teacher internal server error response has a 2xx status code
func (o *AssignSubjectToTeacherInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign subject to teacher internal server error response has a 3xx status code
func (o *AssignSubjectToTeacherInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign subject to teacher internal server error response has a 4xx status code
func (o *AssignSubjectToTeacherInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign subject to teacher internal server error response has a 5xx status code
func (o *AssignSubjectToTeacherInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign subject to teacher internal server error response a status code equal to that given
func (o *AssignSubjectToTeacherInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign subject to teacher internal server error response
func (o *AssignSubjectToTeacherInternalServerError) Code() int {
	return 500
}

func (o *AssignSubjectToTeacherInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /teacher/{ID}/subject][%d] assignSubjectToTeacherInternalServerError ", 500)
}

func (o *AssignSubjectToTeacherInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /teacher/{ID}/subject][%d] assignSubjectToTeacherInternalServerError ", 500)
}

func (o *AssignSubjectToTeacherInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AssignSubjectToTeacherBody assign subject to teacher body
swagger:model AssignSubjectToTeacherBody
*/
type AssignSubjectToTeacherBody struct {

	// subject ID
	SubjectID int64 `json:"SubjectID,omitempty"`
}

// Validate validates this assign subject to teacher body
func (o *AssignSubjectToTeacherBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this assign subject to teacher body based on context it is used
func (o *AssignSubjectToTeacherBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssignSubjectToTeacherBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssignSubjectToTeacherBody) UnmarshalBinary(b []byte) error {
	var res AssignSubjectToTeacherBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
