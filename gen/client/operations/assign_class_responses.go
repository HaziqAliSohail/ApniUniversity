// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssignClassReader is a Reader for the AssignClass structure.
type AssignClassReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignClassReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignClassOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAssignClassNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignClassInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /subject/{ID}/class] assignClass", response, response.Code())
	}
}

// NewAssignClassOK creates a AssignClassOK with default headers values
func NewAssignClassOK() *AssignClassOK {
	return &AssignClassOK{}
}

/*
AssignClassOK describes a response with status code 200, with default header values.

Subject successfully assigned to Class
*/
type AssignClassOK struct {
	Payload int64
}

// IsSuccess returns true when this assign class o k response has a 2xx status code
func (o *AssignClassOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign class o k response has a 3xx status code
func (o *AssignClassOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign class o k response has a 4xx status code
func (o *AssignClassOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign class o k response has a 5xx status code
func (o *AssignClassOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign class o k response a status code equal to that given
func (o *AssignClassOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the assign class o k response
func (o *AssignClassOK) Code() int {
	return 200
}

func (o *AssignClassOK) Error() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/class][%d] assignClassOK  %+v", 200, o.Payload)
}

func (o *AssignClassOK) String() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/class][%d] assignClassOK  %+v", 200, o.Payload)
}

func (o *AssignClassOK) GetPayload() int64 {
	return o.Payload
}

func (o *AssignClassOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignClassNotFound creates a AssignClassNotFound with default headers values
func NewAssignClassNotFound() *AssignClassNotFound {
	return &AssignClassNotFound{}
}

/*
AssignClassNotFound describes a response with status code 404, with default header values.

Subject Not found!
*/
type AssignClassNotFound struct {
}

// IsSuccess returns true when this assign class not found response has a 2xx status code
func (o *AssignClassNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign class not found response has a 3xx status code
func (o *AssignClassNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign class not found response has a 4xx status code
func (o *AssignClassNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign class not found response has a 5xx status code
func (o *AssignClassNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this assign class not found response a status code equal to that given
func (o *AssignClassNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the assign class not found response
func (o *AssignClassNotFound) Code() int {
	return 404
}

func (o *AssignClassNotFound) Error() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/class][%d] assignClassNotFound ", 404)
}

func (o *AssignClassNotFound) String() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/class][%d] assignClassNotFound ", 404)
}

func (o *AssignClassNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignClassInternalServerError creates a AssignClassInternalServerError with default headers values
func NewAssignClassInternalServerError() *AssignClassInternalServerError {
	return &AssignClassInternalServerError{}
}

/*
AssignClassInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AssignClassInternalServerError struct {
}

// IsSuccess returns true when this assign class internal server error response has a 2xx status code
func (o *AssignClassInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign class internal server error response has a 3xx status code
func (o *AssignClassInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign class internal server error response has a 4xx status code
func (o *AssignClassInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign class internal server error response has a 5xx status code
func (o *AssignClassInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign class internal server error response a status code equal to that given
func (o *AssignClassInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the assign class internal server error response
func (o *AssignClassInternalServerError) Code() int {
	return 500
}

func (o *AssignClassInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/class][%d] assignClassInternalServerError ", 500)
}

func (o *AssignClassInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /subject/{ID}/class][%d] assignClassInternalServerError ", 500)
}

func (o *AssignClassInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AssignClassBody assign class body
swagger:model AssignClassBody
*/
type AssignClassBody struct {

	// class ID
	ClassID int64 `json:"ClassID,omitempty"`
}

// Validate validates this assign class body
func (o *AssignClassBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this assign class body based on context it is used
func (o *AssignClassBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssignClassBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssignClassBody) UnmarshalBinary(b []byte) error {
	var res AssignClassBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
