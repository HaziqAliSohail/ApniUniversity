// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAccount(params *AddAccountParams, opts ...ClientOption) (*AddAccountCreated, error)

	AddClass(params *AddClassParams, opts ...ClientOption) (*AddClassCreated, error)

	AddOrRemoveStudent(params *AddOrRemoveStudentParams, opts ...ClientOption) (*AddOrRemoveStudentOK, error)

	AddStudent(params *AddStudentParams, opts ...ClientOption) (*AddStudentCreated, error)

	AddSubject(params *AddSubjectParams, opts ...ClientOption) (*AddSubjectCreated, error)

	AddTeacher(params *AddTeacherParams, opts ...ClientOption) (*AddTeacherCreated, error)

	AssignClass(params *AssignClassParams, opts ...ClientOption) (*AssignClassOK, error)

	AssignSubjectToStudent(params *AssignSubjectToStudentParams, opts ...ClientOption) (*AssignSubjectToStudentOK, error)

	AssignSubjectToTeacher(params *AssignSubjectToTeacherParams, opts ...ClientOption) (*AssignSubjectToTeacherOK, error)

	DeleteAccount(params *DeleteAccountParams, opts ...ClientOption) (*DeleteAccountNoContent, error)

	DeleteClass(params *DeleteClassParams, opts ...ClientOption) (*DeleteClassNoContent, error)

	DeleteStudent(params *DeleteStudentParams, opts ...ClientOption) (*DeleteStudentNoContent, error)

	DeleteSubject(params *DeleteSubjectParams, opts ...ClientOption) (*DeleteSubjectNoContent, error)

	DeleteTeacher(params *DeleteTeacherParams, opts ...ClientOption) (*DeleteTeacherNoContent, error)

	GetAccountByID(params *GetAccountByIDParams, opts ...ClientOption) (*GetAccountByIDOK, error)

	GetAccounts(params *GetAccountsParams, opts ...ClientOption) (*GetAccountsOK, error)

	GetClassByID(params *GetClassByIDParams, opts ...ClientOption) (*GetClassByIDOK, error)

	GetClassOfTeacher(params *GetClassOfTeacherParams, opts ...ClientOption) (*GetClassOfTeacherOK, error)

	GetClasses(params *GetClassesParams, opts ...ClientOption) (*GetClassesOK, error)

	GetClassesOfStudent(params *GetClassesOfStudentParams, opts ...ClientOption) (*GetClassesOfStudentOK, error)

	GetDefaultedStudentAccounts(params *GetDefaultedStudentAccountsParams, opts ...ClientOption) (*GetDefaultedStudentAccountsOK, error)

	GetStudentAccounts(params *GetStudentAccountsParams, opts ...ClientOption) (*GetStudentAccountsOK, error)

	GetStudentByID(params *GetStudentByIDParams, opts ...ClientOption) (*GetStudentByIDOK, error)

	GetStudents(params *GetStudentsParams, opts ...ClientOption) (*GetStudentsOK, error)

	GetStudentsOfClass(params *GetStudentsOfClassParams, opts ...ClientOption) (*GetStudentsOfClassOK, error)

	GetStudentsOfSubject(params *GetStudentsOfSubjectParams, opts ...ClientOption) (*GetStudentsOfSubjectOK, error)

	GetStudentsOfTeacher(params *GetStudentsOfTeacherParams, opts ...ClientOption) (*GetStudentsOfTeacherOK, error)

	GetSubjectByID(params *GetSubjectByIDParams, opts ...ClientOption) (*GetSubjectByIDOK, error)

	GetSubjects(params *GetSubjectsParams, opts ...ClientOption) (*GetSubjectsOK, error)

	GetSubjectsOfClass(params *GetSubjectsOfClassParams, opts ...ClientOption) (*GetSubjectsOfClassOK, error)

	GetSubjectsOfStudent(params *GetSubjectsOfStudentParams, opts ...ClientOption) (*GetSubjectsOfStudentOK, error)

	GetTeacherAccounts(params *GetTeacherAccountsParams, opts ...ClientOption) (*GetTeacherAccountsOK, error)

	GetTeacherByID(params *GetTeacherByIDParams, opts ...ClientOption) (*GetTeacherByIDOK, error)

	GetTeacherOfSubject(params *GetTeacherOfSubjectParams, opts ...ClientOption) (*GetTeacherOfSubjectOK, error)

	GetTeachers(params *GetTeachersParams, opts ...ClientOption) (*GetTeachersOK, error)

	GetTeachersOfClass(params *GetTeachersOfClassParams, opts ...ClientOption) (*GetTeachersOfClassOK, error)

	UpdateAccount(params *UpdateAccountParams, opts ...ClientOption) (*UpdateAccountOK, error)

	UpdateClassName(params *UpdateClassNameParams, opts ...ClientOption) (*UpdateClassNameOK, error)

	UpdateGPA(params *UpdateGPAParams, opts ...ClientOption) (*UpdateGPAOK, error)

	UpdateStudentName(params *UpdateStudentNameParams, opts ...ClientOption) (*UpdateStudentNameOK, error)

	UpdateSubjectName(params *UpdateSubjectNameParams, opts ...ClientOption) (*UpdateSubjectNameOK, error)

	UpdateTeacherName(params *UpdateTeacherNameParams, opts ...ClientOption) (*UpdateTeacherNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddAccount add account API
*/
func (a *Client) AddAccount(params *AddAccountParams, opts ...ClientOption) (*AddAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAccount",
		Method:             "POST",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddClass add class API
*/
func (a *Client) AddClass(params *AddClassParams, opts ...ClientOption) (*AddClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addClass",
		Method:             "POST",
		PathPattern:        "/class",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddClassCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddOrRemoveStudent add or remove student API
*/
func (a *Client) AddOrRemoveStudent(params *AddOrRemoveStudentParams, opts ...ClientOption) (*AddOrRemoveStudentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrRemoveStudentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOrRemoveStudent",
		Method:             "PATCH",
		PathPattern:        "/class/{ID}/student/",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOrRemoveStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrRemoveStudentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOrRemoveStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddStudent add student API
*/
func (a *Client) AddStudent(params *AddStudentParams, opts ...ClientOption) (*AddStudentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStudentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addStudent",
		Method:             "POST",
		PathPattern:        "/student",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStudentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddSubject add subject API
*/
func (a *Client) AddSubject(params *AddSubjectParams, opts ...ClientOption) (*AddSubjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSubject",
		Method:             "POST",
		PathPattern:        "/subject",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSubjectCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSubject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddTeacher add teacher API
*/
func (a *Client) AddTeacher(params *AddTeacherParams, opts ...ClientOption) (*AddTeacherCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTeacher",
		Method:             "POST",
		PathPattern:        "/teacher",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTeacherCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignClass assign class API
*/
func (a *Client) AssignClass(params *AssignClassParams, opts ...ClientOption) (*AssignClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignClass",
		Method:             "PATCH",
		PathPattern:        "/subject/{ID}/class",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignSubjectToStudent assign subject to student API
*/
func (a *Client) AssignSubjectToStudent(params *AssignSubjectToStudentParams, opts ...ClientOption) (*AssignSubjectToStudentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignSubjectToStudentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignSubjectToStudent",
		Method:             "PATCH",
		PathPattern:        "/student/{ID}/subject",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignSubjectToStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignSubjectToStudentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignSubjectToStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignSubjectToTeacher assign subject to teacher API
*/
func (a *Client) AssignSubjectToTeacher(params *AssignSubjectToTeacherParams, opts ...ClientOption) (*AssignSubjectToTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignSubjectToTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignSubjectToTeacher",
		Method:             "PATCH",
		PathPattern:        "/teacher/{ID}/subject",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignSubjectToTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignSubjectToTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignSubjectToTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccount delete account API
*/
func (a *Client) DeleteAccount(params *DeleteAccountParams, opts ...ClientOption) (*DeleteAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccount",
		Method:             "DELETE",
		PathPattern:        "/account/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClass delete class API
*/
func (a *Client) DeleteClass(params *DeleteClassParams, opts ...ClientOption) (*DeleteClassNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClass",
		Method:             "DELETE",
		PathPattern:        "/class/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClassNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStudent delete student API
*/
func (a *Client) DeleteStudent(params *DeleteStudentParams, opts ...ClientOption) (*DeleteStudentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStudentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStudent",
		Method:             "DELETE",
		PathPattern:        "/student/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStudentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubject delete subject API
*/
func (a *Client) DeleteSubject(params *DeleteSubjectParams, opts ...ClientOption) (*DeleteSubjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubject",
		Method:             "DELETE",
		PathPattern:        "/subject/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubjectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSubject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTeacher delete teacher API
*/
func (a *Client) DeleteTeacher(params *DeleteTeacherParams, opts ...ClientOption) (*DeleteTeacherNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTeacher",
		Method:             "DELETE",
		PathPattern:        "/teacher/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeacherNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountByID get account by ID API
*/
func (a *Client) GetAccountByID(params *GetAccountByIDParams, opts ...ClientOption) (*GetAccountByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountByID",
		Method:             "GET",
		PathPattern:        "/account/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccounts Get all Accounts
*/
func (a *Client) GetAccounts(params *GetAccountsParams, opts ...ClientOption) (*GetAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccounts",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClassByID get class by ID API
*/
func (a *Client) GetClassByID(params *GetClassByIDParams, opts ...ClientOption) (*GetClassByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClassByID",
		Method:             "GET",
		PathPattern:        "/class/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClassByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClassByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClassOfTeacher get class of teacher API
*/
func (a *Client) GetClassOfTeacher(params *GetClassOfTeacherParams, opts ...ClientOption) (*GetClassOfTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassOfTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClassOfTeacher",
		Method:             "GET",
		PathPattern:        "/teacher/{ID}/class",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClassOfTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassOfTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClassOfTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClasses Get all Classes
*/
func (a *Client) GetClasses(params *GetClassesParams, opts ...ClientOption) (*GetClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClasses",
		Method:             "GET",
		PathPattern:        "/class",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClassesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClasses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClassesOfStudent get classes of student API
*/
func (a *Client) GetClassesOfStudent(params *GetClassesOfStudentParams, opts ...ClientOption) (*GetClassesOfStudentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassesOfStudentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClassesOfStudent",
		Method:             "GET",
		PathPattern:        "/student/{ID}/classes",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClassesOfStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassesOfStudentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClassesOfStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDefaultedStudentAccounts Get Defaulted Student Accounts
*/
func (a *Client) GetDefaultedStudentAccounts(params *GetDefaultedStudentAccountsParams, opts ...ClientOption) (*GetDefaultedStudentAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefaultedStudentAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDefaultedStudentAccounts",
		Method:             "GET",
		PathPattern:        "/account/student/default",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDefaultedStudentAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefaultedStudentAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefaultedStudentAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudentAccounts Get all Student Accounts
*/
func (a *Client) GetStudentAccounts(params *GetStudentAccountsParams, opts ...ClientOption) (*GetStudentAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStudentAccounts",
		Method:             "GET",
		PathPattern:        "/account/student",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudentAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudentByID get student by ID API
*/
func (a *Client) GetStudentByID(params *GetStudentByIDParams, opts ...ClientOption) (*GetStudentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStudentByID",
		Method:             "GET",
		PathPattern:        "/student/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudentByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudents Get all Students
*/
func (a *Client) GetStudents(params *GetStudentsParams, opts ...ClientOption) (*GetStudentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStudents",
		Method:             "GET",
		PathPattern:        "/student",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudentsOfClass get students of class API
*/
func (a *Client) GetStudentsOfClass(params *GetStudentsOfClassParams, opts ...ClientOption) (*GetStudentsOfClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentsOfClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStudentsOfClass",
		Method:             "GET",
		PathPattern:        "/class/{ID}/Students",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentsOfClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentsOfClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudentsOfClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudentsOfSubject get students of subject API
*/
func (a *Client) GetStudentsOfSubject(params *GetStudentsOfSubjectParams, opts ...ClientOption) (*GetStudentsOfSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentsOfSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStudentsOfSubject",
		Method:             "GET",
		PathPattern:        "/subject/{ID}/students",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentsOfSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentsOfSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudentsOfSubject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudentsOfTeacher get students of teacher API
*/
func (a *Client) GetStudentsOfTeacher(params *GetStudentsOfTeacherParams, opts ...ClientOption) (*GetStudentsOfTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentsOfTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStudentsOfTeacher",
		Method:             "GET",
		PathPattern:        "/teacher/{ID}/students",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStudentsOfTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentsOfTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudentsOfTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectByID get subject by ID API
*/
func (a *Client) GetSubjectByID(params *GetSubjectByIDParams, opts ...ClientOption) (*GetSubjectByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubjectByID",
		Method:             "GET",
		PathPattern:        "/subject/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubjectByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjects Get all Subjects
*/
func (a *Client) GetSubjects(params *GetSubjectsParams, opts ...ClientOption) (*GetSubjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubjects",
		Method:             "GET",
		PathPattern:        "/subject",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectsOfClass get subjects of class API
*/
func (a *Client) GetSubjectsOfClass(params *GetSubjectsOfClassParams, opts ...ClientOption) (*GetSubjectsOfClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectsOfClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubjectsOfClass",
		Method:             "GET",
		PathPattern:        "/class/{ID}/subjects",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectsOfClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectsOfClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubjectsOfClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectsOfStudent get subjects of student API
*/
func (a *Client) GetSubjectsOfStudent(params *GetSubjectsOfStudentParams, opts ...ClientOption) (*GetSubjectsOfStudentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectsOfStudentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubjectsOfStudent",
		Method:             "GET",
		PathPattern:        "/student/{ID}/subjects",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectsOfStudentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectsOfStudentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubjectsOfStudent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeacherAccounts Get all Teacher Accounts
*/
func (a *Client) GetTeacherAccounts(params *GetTeacherAccountsParams, opts ...ClientOption) (*GetTeacherAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeacherAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTeacherAccounts",
		Method:             "GET",
		PathPattern:        "/account/teacher",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeacherAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeacherAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeacherAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeacherByID get teacher by ID API
*/
func (a *Client) GetTeacherByID(params *GetTeacherByIDParams, opts ...ClientOption) (*GetTeacherByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeacherByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTeacherByID",
		Method:             "GET",
		PathPattern:        "/teacher/{ID}",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeacherByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeacherByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeacherByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeacherOfSubject get teacher of subject API
*/
func (a *Client) GetTeacherOfSubject(params *GetTeacherOfSubjectParams, opts ...ClientOption) (*GetTeacherOfSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeacherOfSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTeacherOfSubject",
		Method:             "GET",
		PathPattern:        "/subject/{ID}/teacher",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeacherOfSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeacherOfSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeacherOfSubject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeachers Get all Teachers
*/
func (a *Client) GetTeachers(params *GetTeachersParams, opts ...ClientOption) (*GetTeachersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeachersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTeachers",
		Method:             "GET",
		PathPattern:        "/teacher",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeachersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeachersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeachers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeachersOfClass get teachers of class API
*/
func (a *Client) GetTeachersOfClass(params *GetTeachersOfClassParams, opts ...ClientOption) (*GetTeachersOfClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeachersOfClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTeachersOfClass",
		Method:             "GET",
		PathPattern:        "/class/{ID}/teachers",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeachersOfClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeachersOfClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeachersOfClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAccount update account API
*/
func (a *Client) UpdateAccount(params *UpdateAccountParams, opts ...ClientOption) (*UpdateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccount",
		Method:             "PUT",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClassName update class name API
*/
func (a *Client) UpdateClassName(params *UpdateClassNameParams, opts ...ClientOption) (*UpdateClassNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClassNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClassName",
		Method:             "PATCH",
		PathPattern:        "/class/{ID}/name",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClassNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClassNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClassName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGPA update g p a API
*/
func (a *Client) UpdateGPA(params *UpdateGPAParams, opts ...ClientOption) (*UpdateGPAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGPAParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGPA",
		Method:             "PATCH",
		PathPattern:        "/student/{ID}/gpa",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGPAReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGPAOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGPA: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStudentName update student name API
*/
func (a *Client) UpdateStudentName(params *UpdateStudentNameParams, opts ...ClientOption) (*UpdateStudentNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStudentNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStudentName",
		Method:             "PATCH",
		PathPattern:        "/student/{ID}/name",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStudentNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStudentNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStudentName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSubjectName update subject name API
*/
func (a *Client) UpdateSubjectName(params *UpdateSubjectNameParams, opts ...ClientOption) (*UpdateSubjectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubjectNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSubjectName",
		Method:             "PATCH",
		PathPattern:        "/subject/{ID}/name",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubjectNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubjectNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSubjectName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTeacherName update teacher name API
*/
func (a *Client) UpdateTeacherName(params *UpdateTeacherNameParams, opts ...ClientOption) (*UpdateTeacherNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeacherNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTeacherName",
		Method:             "PATCH",
		PathPattern:        "/teacher/{ID}/name",
		ProducesMediaTypes: []string{"application/json", "integer"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTeacherNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeacherNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTeacherName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
