// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ApniUniversity/gen/models"
)

// AddSubjectReader is a Reader for the AddSubject structure.
type AddSubjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddSubjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddSubjectCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAddSubjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddSubjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /subject] addSubject", response, response.Code())
	}
}

// NewAddSubjectCreated creates a AddSubjectCreated with default headers values
func NewAddSubjectCreated() *AddSubjectCreated {
	return &AddSubjectCreated{}
}

/*
AddSubjectCreated describes a response with status code 201, with default header values.

Subject added Successfully
*/
type AddSubjectCreated struct {
	Payload *models.Subject
}

// IsSuccess returns true when this add subject created response has a 2xx status code
func (o *AddSubjectCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add subject created response has a 3xx status code
func (o *AddSubjectCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add subject created response has a 4xx status code
func (o *AddSubjectCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add subject created response has a 5xx status code
func (o *AddSubjectCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add subject created response a status code equal to that given
func (o *AddSubjectCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add subject created response
func (o *AddSubjectCreated) Code() int {
	return 201
}

func (o *AddSubjectCreated) Error() string {
	return fmt.Sprintf("[POST /subject][%d] addSubjectCreated  %+v", 201, o.Payload)
}

func (o *AddSubjectCreated) String() string {
	return fmt.Sprintf("[POST /subject][%d] addSubjectCreated  %+v", 201, o.Payload)
}

func (o *AddSubjectCreated) GetPayload() *models.Subject {
	return o.Payload
}

func (o *AddSubjectCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSubjectConflict creates a AddSubjectConflict with default headers values
func NewAddSubjectConflict() *AddSubjectConflict {
	return &AddSubjectConflict{}
}

/*
AddSubjectConflict describes a response with status code 409, with default header values.

Subject already exists
*/
type AddSubjectConflict struct {
}

// IsSuccess returns true when this add subject conflict response has a 2xx status code
func (o *AddSubjectConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add subject conflict response has a 3xx status code
func (o *AddSubjectConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add subject conflict response has a 4xx status code
func (o *AddSubjectConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this add subject conflict response has a 5xx status code
func (o *AddSubjectConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this add subject conflict response a status code equal to that given
func (o *AddSubjectConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the add subject conflict response
func (o *AddSubjectConflict) Code() int {
	return 409
}

func (o *AddSubjectConflict) Error() string {
	return fmt.Sprintf("[POST /subject][%d] addSubjectConflict ", 409)
}

func (o *AddSubjectConflict) String() string {
	return fmt.Sprintf("[POST /subject][%d] addSubjectConflict ", 409)
}

func (o *AddSubjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddSubjectInternalServerError creates a AddSubjectInternalServerError with default headers values
func NewAddSubjectInternalServerError() *AddSubjectInternalServerError {
	return &AddSubjectInternalServerError{}
}

/*
AddSubjectInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type AddSubjectInternalServerError struct {
}

// IsSuccess returns true when this add subject internal server error response has a 2xx status code
func (o *AddSubjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add subject internal server error response has a 3xx status code
func (o *AddSubjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add subject internal server error response has a 4xx status code
func (o *AddSubjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add subject internal server error response has a 5xx status code
func (o *AddSubjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add subject internal server error response a status code equal to that given
func (o *AddSubjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add subject internal server error response
func (o *AddSubjectInternalServerError) Code() int {
	return 500
}

func (o *AddSubjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /subject][%d] addSubjectInternalServerError ", 500)
}

func (o *AddSubjectInternalServerError) String() string {
	return fmt.Sprintf("[POST /subject][%d] addSubjectInternalServerError ", 500)
}

func (o *AddSubjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
