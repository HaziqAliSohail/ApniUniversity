// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddOrRemoveStudentReader is a Reader for the AddOrRemoveStudent structure.
type AddOrRemoveStudentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddOrRemoveStudentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddOrRemoveStudentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAddOrRemoveStudentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddOrRemoveStudentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /class/{ID}/student/] addOrRemoveStudent", response, response.Code())
	}
}

// NewAddOrRemoveStudentOK creates a AddOrRemoveStudentOK with default headers values
func NewAddOrRemoveStudentOK() *AddOrRemoveStudentOK {
	return &AddOrRemoveStudentOK{}
}

/*
AddOrRemoveStudentOK describes a response with status code 200, with default header values.

Student added/removed to Class
*/
type AddOrRemoveStudentOK struct {
	Payload int64
}

// IsSuccess returns true when this add or remove student o k response has a 2xx status code
func (o *AddOrRemoveStudentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add or remove student o k response has a 3xx status code
func (o *AddOrRemoveStudentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add or remove student o k response has a 4xx status code
func (o *AddOrRemoveStudentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add or remove student o k response has a 5xx status code
func (o *AddOrRemoveStudentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add or remove student o k response a status code equal to that given
func (o *AddOrRemoveStudentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add or remove student o k response
func (o *AddOrRemoveStudentOK) Code() int {
	return 200
}

func (o *AddOrRemoveStudentOK) Error() string {
	return fmt.Sprintf("[PATCH /class/{ID}/student/][%d] addOrRemoveStudentOK  %+v", 200, o.Payload)
}

func (o *AddOrRemoveStudentOK) String() string {
	return fmt.Sprintf("[PATCH /class/{ID}/student/][%d] addOrRemoveStudentOK  %+v", 200, o.Payload)
}

func (o *AddOrRemoveStudentOK) GetPayload() int64 {
	return o.Payload
}

func (o *AddOrRemoveStudentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrRemoveStudentNotFound creates a AddOrRemoveStudentNotFound with default headers values
func NewAddOrRemoveStudentNotFound() *AddOrRemoveStudentNotFound {
	return &AddOrRemoveStudentNotFound{}
}

/*
AddOrRemoveStudentNotFound describes a response with status code 404, with default header values.

Class Not found!
*/
type AddOrRemoveStudentNotFound struct {
}

// IsSuccess returns true when this add or remove student not found response has a 2xx status code
func (o *AddOrRemoveStudentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add or remove student not found response has a 3xx status code
func (o *AddOrRemoveStudentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add or remove student not found response has a 4xx status code
func (o *AddOrRemoveStudentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add or remove student not found response has a 5xx status code
func (o *AddOrRemoveStudentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add or remove student not found response a status code equal to that given
func (o *AddOrRemoveStudentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add or remove student not found response
func (o *AddOrRemoveStudentNotFound) Code() int {
	return 404
}

func (o *AddOrRemoveStudentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /class/{ID}/student/][%d] addOrRemoveStudentNotFound ", 404)
}

func (o *AddOrRemoveStudentNotFound) String() string {
	return fmt.Sprintf("[PATCH /class/{ID}/student/][%d] addOrRemoveStudentNotFound ", 404)
}

func (o *AddOrRemoveStudentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddOrRemoveStudentInternalServerError creates a AddOrRemoveStudentInternalServerError with default headers values
func NewAddOrRemoveStudentInternalServerError() *AddOrRemoveStudentInternalServerError {
	return &AddOrRemoveStudentInternalServerError{}
}

/*
AddOrRemoveStudentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddOrRemoveStudentInternalServerError struct {
}

// IsSuccess returns true when this add or remove student internal server error response has a 2xx status code
func (o *AddOrRemoveStudentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add or remove student internal server error response has a 3xx status code
func (o *AddOrRemoveStudentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add or remove student internal server error response has a 4xx status code
func (o *AddOrRemoveStudentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add or remove student internal server error response has a 5xx status code
func (o *AddOrRemoveStudentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add or remove student internal server error response a status code equal to that given
func (o *AddOrRemoveStudentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add or remove student internal server error response
func (o *AddOrRemoveStudentInternalServerError) Code() int {
	return 500
}

func (o *AddOrRemoveStudentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /class/{ID}/student/][%d] addOrRemoveStudentInternalServerError ", 500)
}

func (o *AddOrRemoveStudentInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /class/{ID}/student/][%d] addOrRemoveStudentInternalServerError ", 500)
}

func (o *AddOrRemoveStudentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AddOrRemoveStudentBody add or remove student body
swagger:model AddOrRemoveStudentBody
*/
type AddOrRemoveStudentBody struct {

	// add
	Add bool `json:"Add,omitempty"`

	// student ID
	StudentID int64 `json:"StudentID,omitempty"`
}

// Validate validates this add or remove student body
func (o *AddOrRemoveStudentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add or remove student body based on context it is used
func (o *AddOrRemoveStudentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddOrRemoveStudentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOrRemoveStudentBody) UnmarshalBinary(b []byte) error {
	var res AddOrRemoveStudentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
