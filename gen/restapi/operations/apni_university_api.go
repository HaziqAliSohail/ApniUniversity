// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewApniUniversityAPI creates a new ApniUniversity instance
func NewApniUniversityAPI(spec *loads.Document) *ApniUniversityAPI {
	return &ApniUniversityAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		IntegerProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("integer producer has not yet been implemented")
		}),
		JSONProducer: runtime.JSONProducer(),

		AddAccountHandler: AddAccountHandlerFunc(func(params AddAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation AddAccount has not yet been implemented")
		}),
		AddClassHandler: AddClassHandlerFunc(func(params AddClassParams) middleware.Responder {
			return middleware.NotImplemented("operation AddClass has not yet been implemented")
		}),
		AddOrRemoveStudentHandler: AddOrRemoveStudentHandlerFunc(func(params AddOrRemoveStudentParams) middleware.Responder {
			return middleware.NotImplemented("operation AddOrRemoveStudent has not yet been implemented")
		}),
		AddStudentHandler: AddStudentHandlerFunc(func(params AddStudentParams) middleware.Responder {
			return middleware.NotImplemented("operation AddStudent has not yet been implemented")
		}),
		AddSubjectHandler: AddSubjectHandlerFunc(func(params AddSubjectParams) middleware.Responder {
			return middleware.NotImplemented("operation AddSubject has not yet been implemented")
		}),
		AddTeacherHandler: AddTeacherHandlerFunc(func(params AddTeacherParams) middleware.Responder {
			return middleware.NotImplemented("operation AddTeacher has not yet been implemented")
		}),
		AssignClassHandler: AssignClassHandlerFunc(func(params AssignClassParams) middleware.Responder {
			return middleware.NotImplemented("operation AssignClass has not yet been implemented")
		}),
		AssignSubjectToStudentHandler: AssignSubjectToStudentHandlerFunc(func(params AssignSubjectToStudentParams) middleware.Responder {
			return middleware.NotImplemented("operation AssignSubjectToStudent has not yet been implemented")
		}),
		AssignSubjectToTeacherHandler: AssignSubjectToTeacherHandlerFunc(func(params AssignSubjectToTeacherParams) middleware.Responder {
			return middleware.NotImplemented("operation AssignSubjectToTeacher has not yet been implemented")
		}),
		DeleteAccountHandler: DeleteAccountHandlerFunc(func(params DeleteAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteAccount has not yet been implemented")
		}),
		DeleteClassHandler: DeleteClassHandlerFunc(func(params DeleteClassParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteClass has not yet been implemented")
		}),
		DeleteStudentHandler: DeleteStudentHandlerFunc(func(params DeleteStudentParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteStudent has not yet been implemented")
		}),
		DeleteSubjectHandler: DeleteSubjectHandlerFunc(func(params DeleteSubjectParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteSubject has not yet been implemented")
		}),
		DeleteTeacherHandler: DeleteTeacherHandlerFunc(func(params DeleteTeacherParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTeacher has not yet been implemented")
		}),
		GetAccountByIDHandler: GetAccountByIDHandlerFunc(func(params GetAccountByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAccountByID has not yet been implemented")
		}),
		GetAccountsHandler: GetAccountsHandlerFunc(func(params GetAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAccounts has not yet been implemented")
		}),
		GetClassByIDHandler: GetClassByIDHandlerFunc(func(params GetClassByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetClassByID has not yet been implemented")
		}),
		GetClassOfTeacherHandler: GetClassOfTeacherHandlerFunc(func(params GetClassOfTeacherParams) middleware.Responder {
			return middleware.NotImplemented("operation GetClassOfTeacher has not yet been implemented")
		}),
		GetClassesHandler: GetClassesHandlerFunc(func(params GetClassesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetClasses has not yet been implemented")
		}),
		GetClassesOfStudentHandler: GetClassesOfStudentHandlerFunc(func(params GetClassesOfStudentParams) middleware.Responder {
			return middleware.NotImplemented("operation GetClassesOfStudent has not yet been implemented")
		}),
		GetDefaultedStudentAccountsHandler: GetDefaultedStudentAccountsHandlerFunc(func(params GetDefaultedStudentAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetDefaultedStudentAccounts has not yet been implemented")
		}),
		GetStudentAccountsHandler: GetStudentAccountsHandlerFunc(func(params GetStudentAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStudentAccounts has not yet been implemented")
		}),
		GetStudentByIDHandler: GetStudentByIDHandlerFunc(func(params GetStudentByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStudentByID has not yet been implemented")
		}),
		GetStudentsHandler: GetStudentsHandlerFunc(func(params GetStudentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStudents has not yet been implemented")
		}),
		GetStudentsOfClassHandler: GetStudentsOfClassHandlerFunc(func(params GetStudentsOfClassParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStudentsOfClass has not yet been implemented")
		}),
		GetStudentsOfSubjectHandler: GetStudentsOfSubjectHandlerFunc(func(params GetStudentsOfSubjectParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStudentsOfSubject has not yet been implemented")
		}),
		GetStudentsOfTeacherHandler: GetStudentsOfTeacherHandlerFunc(func(params GetStudentsOfTeacherParams) middleware.Responder {
			return middleware.NotImplemented("operation GetStudentsOfTeacher has not yet been implemented")
		}),
		GetSubjectByIDHandler: GetSubjectByIDHandlerFunc(func(params GetSubjectByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSubjectByID has not yet been implemented")
		}),
		GetSubjectsHandler: GetSubjectsHandlerFunc(func(params GetSubjectsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSubjects has not yet been implemented")
		}),
		GetSubjectsOfClassHandler: GetSubjectsOfClassHandlerFunc(func(params GetSubjectsOfClassParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSubjectsOfClass has not yet been implemented")
		}),
		GetSubjectsOfStudentHandler: GetSubjectsOfStudentHandlerFunc(func(params GetSubjectsOfStudentParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSubjectsOfStudent has not yet been implemented")
		}),
		GetTeacherAccountsHandler: GetTeacherAccountsHandlerFunc(func(params GetTeacherAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeacherAccounts has not yet been implemented")
		}),
		GetTeacherByIDHandler: GetTeacherByIDHandlerFunc(func(params GetTeacherByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeacherByID has not yet been implemented")
		}),
		GetTeacherOfSubjectHandler: GetTeacherOfSubjectHandlerFunc(func(params GetTeacherOfSubjectParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeacherOfSubject has not yet been implemented")
		}),
		GetTeachersHandler: GetTeachersHandlerFunc(func(params GetTeachersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeachers has not yet been implemented")
		}),
		GetTeachersOfClassHandler: GetTeachersOfClassHandlerFunc(func(params GetTeachersOfClassParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeachersOfClass has not yet been implemented")
		}),
		UpdateAccountHandler: UpdateAccountHandlerFunc(func(params UpdateAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateAccount has not yet been implemented")
		}),
		UpdateClassNameHandler: UpdateClassNameHandlerFunc(func(params UpdateClassNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateClassName has not yet been implemented")
		}),
		UpdateGPAHandler: UpdateGPAHandlerFunc(func(params UpdateGPAParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateGPA has not yet been implemented")
		}),
		UpdateStudentNameHandler: UpdateStudentNameHandlerFunc(func(params UpdateStudentNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateStudentName has not yet been implemented")
		}),
		UpdateSubjectNameHandler: UpdateSubjectNameHandlerFunc(func(params UpdateSubjectNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateSubjectName has not yet been implemented")
		}),
		UpdateTeacherNameHandler: UpdateTeacherNameHandlerFunc(func(params UpdateTeacherNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateTeacherName has not yet been implemented")
		}),
	}
}

/*ApniUniversityAPI Apni University is microservices based web application. It aims of the management of students and teachers of the Apni University. It includes the management of their academic as well as accounts details. */
type ApniUniversityAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// IntegerProducer registers a producer for the following mime types:
	//   - integer
	IntegerProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// AddAccountHandler sets the operation handler for the add account operation
	AddAccountHandler AddAccountHandler
	// AddClassHandler sets the operation handler for the add class operation
	AddClassHandler AddClassHandler
	// AddOrRemoveStudentHandler sets the operation handler for the add or remove student operation
	AddOrRemoveStudentHandler AddOrRemoveStudentHandler
	// AddStudentHandler sets the operation handler for the add student operation
	AddStudentHandler AddStudentHandler
	// AddSubjectHandler sets the operation handler for the add subject operation
	AddSubjectHandler AddSubjectHandler
	// AddTeacherHandler sets the operation handler for the add teacher operation
	AddTeacherHandler AddTeacherHandler
	// AssignClassHandler sets the operation handler for the assign class operation
	AssignClassHandler AssignClassHandler
	// AssignSubjectToStudentHandler sets the operation handler for the assign subject to student operation
	AssignSubjectToStudentHandler AssignSubjectToStudentHandler
	// AssignSubjectToTeacherHandler sets the operation handler for the assign subject to teacher operation
	AssignSubjectToTeacherHandler AssignSubjectToTeacherHandler
	// DeleteAccountHandler sets the operation handler for the delete account operation
	DeleteAccountHandler DeleteAccountHandler
	// DeleteClassHandler sets the operation handler for the delete class operation
	DeleteClassHandler DeleteClassHandler
	// DeleteStudentHandler sets the operation handler for the delete student operation
	DeleteStudentHandler DeleteStudentHandler
	// DeleteSubjectHandler sets the operation handler for the delete subject operation
	DeleteSubjectHandler DeleteSubjectHandler
	// DeleteTeacherHandler sets the operation handler for the delete teacher operation
	DeleteTeacherHandler DeleteTeacherHandler
	// GetAccountByIDHandler sets the operation handler for the get account by ID operation
	GetAccountByIDHandler GetAccountByIDHandler
	// GetAccountsHandler sets the operation handler for the get accounts operation
	GetAccountsHandler GetAccountsHandler
	// GetClassByIDHandler sets the operation handler for the get class by ID operation
	GetClassByIDHandler GetClassByIDHandler
	// GetClassOfTeacherHandler sets the operation handler for the get class of teacher operation
	GetClassOfTeacherHandler GetClassOfTeacherHandler
	// GetClassesHandler sets the operation handler for the get classes operation
	GetClassesHandler GetClassesHandler
	// GetClassesOfStudentHandler sets the operation handler for the get classes of student operation
	GetClassesOfStudentHandler GetClassesOfStudentHandler
	// GetDefaultedStudentAccountsHandler sets the operation handler for the get defaulted student accounts operation
	GetDefaultedStudentAccountsHandler GetDefaultedStudentAccountsHandler
	// GetStudentAccountsHandler sets the operation handler for the get student accounts operation
	GetStudentAccountsHandler GetStudentAccountsHandler
	// GetStudentByIDHandler sets the operation handler for the get student by ID operation
	GetStudentByIDHandler GetStudentByIDHandler
	// GetStudentsHandler sets the operation handler for the get students operation
	GetStudentsHandler GetStudentsHandler
	// GetStudentsOfClassHandler sets the operation handler for the get students of class operation
	GetStudentsOfClassHandler GetStudentsOfClassHandler
	// GetStudentsOfSubjectHandler sets the operation handler for the get students of subject operation
	GetStudentsOfSubjectHandler GetStudentsOfSubjectHandler
	// GetStudentsOfTeacherHandler sets the operation handler for the get students of teacher operation
	GetStudentsOfTeacherHandler GetStudentsOfTeacherHandler
	// GetSubjectByIDHandler sets the operation handler for the get subject by ID operation
	GetSubjectByIDHandler GetSubjectByIDHandler
	// GetSubjectsHandler sets the operation handler for the get subjects operation
	GetSubjectsHandler GetSubjectsHandler
	// GetSubjectsOfClassHandler sets the operation handler for the get subjects of class operation
	GetSubjectsOfClassHandler GetSubjectsOfClassHandler
	// GetSubjectsOfStudentHandler sets the operation handler for the get subjects of student operation
	GetSubjectsOfStudentHandler GetSubjectsOfStudentHandler
	// GetTeacherAccountsHandler sets the operation handler for the get teacher accounts operation
	GetTeacherAccountsHandler GetTeacherAccountsHandler
	// GetTeacherByIDHandler sets the operation handler for the get teacher by ID operation
	GetTeacherByIDHandler GetTeacherByIDHandler
	// GetTeacherOfSubjectHandler sets the operation handler for the get teacher of subject operation
	GetTeacherOfSubjectHandler GetTeacherOfSubjectHandler
	// GetTeachersHandler sets the operation handler for the get teachers operation
	GetTeachersHandler GetTeachersHandler
	// GetTeachersOfClassHandler sets the operation handler for the get teachers of class operation
	GetTeachersOfClassHandler GetTeachersOfClassHandler
	// UpdateAccountHandler sets the operation handler for the update account operation
	UpdateAccountHandler UpdateAccountHandler
	// UpdateClassNameHandler sets the operation handler for the update class name operation
	UpdateClassNameHandler UpdateClassNameHandler
	// UpdateGPAHandler sets the operation handler for the update g p a operation
	UpdateGPAHandler UpdateGPAHandler
	// UpdateStudentNameHandler sets the operation handler for the update student name operation
	UpdateStudentNameHandler UpdateStudentNameHandler
	// UpdateSubjectNameHandler sets the operation handler for the update subject name operation
	UpdateSubjectNameHandler UpdateSubjectNameHandler
	// UpdateTeacherNameHandler sets the operation handler for the update teacher name operation
	UpdateTeacherNameHandler UpdateTeacherNameHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ApniUniversityAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ApniUniversityAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ApniUniversityAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ApniUniversityAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ApniUniversityAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ApniUniversityAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ApniUniversityAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ApniUniversityAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ApniUniversityAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ApniUniversityAPI
func (o *ApniUniversityAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.IntegerProducer == nil {
		unregistered = append(unregistered, "IntegerProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AddAccountHandler == nil {
		unregistered = append(unregistered, "AddAccountHandler")
	}
	if o.AddClassHandler == nil {
		unregistered = append(unregistered, "AddClassHandler")
	}
	if o.AddOrRemoveStudentHandler == nil {
		unregistered = append(unregistered, "AddOrRemoveStudentHandler")
	}
	if o.AddStudentHandler == nil {
		unregistered = append(unregistered, "AddStudentHandler")
	}
	if o.AddSubjectHandler == nil {
		unregistered = append(unregistered, "AddSubjectHandler")
	}
	if o.AddTeacherHandler == nil {
		unregistered = append(unregistered, "AddTeacherHandler")
	}
	if o.AssignClassHandler == nil {
		unregistered = append(unregistered, "AssignClassHandler")
	}
	if o.AssignSubjectToStudentHandler == nil {
		unregistered = append(unregistered, "AssignSubjectToStudentHandler")
	}
	if o.AssignSubjectToTeacherHandler == nil {
		unregistered = append(unregistered, "AssignSubjectToTeacherHandler")
	}
	if o.DeleteAccountHandler == nil {
		unregistered = append(unregistered, "DeleteAccountHandler")
	}
	if o.DeleteClassHandler == nil {
		unregistered = append(unregistered, "DeleteClassHandler")
	}
	if o.DeleteStudentHandler == nil {
		unregistered = append(unregistered, "DeleteStudentHandler")
	}
	if o.DeleteSubjectHandler == nil {
		unregistered = append(unregistered, "DeleteSubjectHandler")
	}
	if o.DeleteTeacherHandler == nil {
		unregistered = append(unregistered, "DeleteTeacherHandler")
	}
	if o.GetAccountByIDHandler == nil {
		unregistered = append(unregistered, "GetAccountByIDHandler")
	}
	if o.GetAccountsHandler == nil {
		unregistered = append(unregistered, "GetAccountsHandler")
	}
	if o.GetClassByIDHandler == nil {
		unregistered = append(unregistered, "GetClassByIDHandler")
	}
	if o.GetClassOfTeacherHandler == nil {
		unregistered = append(unregistered, "GetClassOfTeacherHandler")
	}
	if o.GetClassesHandler == nil {
		unregistered = append(unregistered, "GetClassesHandler")
	}
	if o.GetClassesOfStudentHandler == nil {
		unregistered = append(unregistered, "GetClassesOfStudentHandler")
	}
	if o.GetDefaultedStudentAccountsHandler == nil {
		unregistered = append(unregistered, "GetDefaultedStudentAccountsHandler")
	}
	if o.GetStudentAccountsHandler == nil {
		unregistered = append(unregistered, "GetStudentAccountsHandler")
	}
	if o.GetStudentByIDHandler == nil {
		unregistered = append(unregistered, "GetStudentByIDHandler")
	}
	if o.GetStudentsHandler == nil {
		unregistered = append(unregistered, "GetStudentsHandler")
	}
	if o.GetStudentsOfClassHandler == nil {
		unregistered = append(unregistered, "GetStudentsOfClassHandler")
	}
	if o.GetStudentsOfSubjectHandler == nil {
		unregistered = append(unregistered, "GetStudentsOfSubjectHandler")
	}
	if o.GetStudentsOfTeacherHandler == nil {
		unregistered = append(unregistered, "GetStudentsOfTeacherHandler")
	}
	if o.GetSubjectByIDHandler == nil {
		unregistered = append(unregistered, "GetSubjectByIDHandler")
	}
	if o.GetSubjectsHandler == nil {
		unregistered = append(unregistered, "GetSubjectsHandler")
	}
	if o.GetSubjectsOfClassHandler == nil {
		unregistered = append(unregistered, "GetSubjectsOfClassHandler")
	}
	if o.GetSubjectsOfStudentHandler == nil {
		unregistered = append(unregistered, "GetSubjectsOfStudentHandler")
	}
	if o.GetTeacherAccountsHandler == nil {
		unregistered = append(unregistered, "GetTeacherAccountsHandler")
	}
	if o.GetTeacherByIDHandler == nil {
		unregistered = append(unregistered, "GetTeacherByIDHandler")
	}
	if o.GetTeacherOfSubjectHandler == nil {
		unregistered = append(unregistered, "GetTeacherOfSubjectHandler")
	}
	if o.GetTeachersHandler == nil {
		unregistered = append(unregistered, "GetTeachersHandler")
	}
	if o.GetTeachersOfClassHandler == nil {
		unregistered = append(unregistered, "GetTeachersOfClassHandler")
	}
	if o.UpdateAccountHandler == nil {
		unregistered = append(unregistered, "UpdateAccountHandler")
	}
	if o.UpdateClassNameHandler == nil {
		unregistered = append(unregistered, "UpdateClassNameHandler")
	}
	if o.UpdateGPAHandler == nil {
		unregistered = append(unregistered, "UpdateGPAHandler")
	}
	if o.UpdateStudentNameHandler == nil {
		unregistered = append(unregistered, "UpdateStudentNameHandler")
	}
	if o.UpdateSubjectNameHandler == nil {
		unregistered = append(unregistered, "UpdateSubjectNameHandler")
	}
	if o.UpdateTeacherNameHandler == nil {
		unregistered = append(unregistered, "UpdateTeacherNameHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ApniUniversityAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ApniUniversityAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *ApniUniversityAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ApniUniversityAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ApniUniversityAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "integer":
			result["integer"] = o.IntegerProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ApniUniversityAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the apni university API
func (o *ApniUniversityAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ApniUniversityAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account"] = NewAddAccount(o.context, o.AddAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/class"] = NewAddClass(o.context, o.AddClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/class/{ID}/student"] = NewAddOrRemoveStudent(o.context, o.AddOrRemoveStudentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/student"] = NewAddStudent(o.context, o.AddStudentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subject"] = NewAddSubject(o.context, o.AddSubjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teacher"] = NewAddTeacher(o.context, o.AddTeacherHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/subject/{ID}/class"] = NewAssignClass(o.context, o.AssignClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/student/{ID}/subject"] = NewAssignSubjectToStudent(o.context, o.AssignSubjectToStudentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/teacher/{ID}/subject"] = NewAssignSubjectToTeacher(o.context, o.AssignSubjectToTeacherHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/account/{ID}"] = NewDeleteAccount(o.context, o.DeleteAccountHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/class/{ID}"] = NewDeleteClass(o.context, o.DeleteClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/student/{ID}"] = NewDeleteStudent(o.context, o.DeleteStudentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subject/{ID}"] = NewDeleteSubject(o.context, o.DeleteSubjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teacher/{ID}"] = NewDeleteTeacher(o.context, o.DeleteTeacherHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/{ID}"] = NewGetAccountByID(o.context, o.GetAccountByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account"] = NewGetAccounts(o.context, o.GetAccountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/class/{ID}"] = NewGetClassByID(o.context, o.GetClassByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teacher/{ID}/class"] = NewGetClassOfTeacher(o.context, o.GetClassOfTeacherHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/class"] = NewGetClasses(o.context, o.GetClassesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/student/{ID}/classes"] = NewGetClassesOfStudent(o.context, o.GetClassesOfStudentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/student/default"] = NewGetDefaultedStudentAccounts(o.context, o.GetDefaultedStudentAccountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/student"] = NewGetStudentAccounts(o.context, o.GetStudentAccountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/student/{ID}"] = NewGetStudentByID(o.context, o.GetStudentByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/student"] = NewGetStudents(o.context, o.GetStudentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/class/{ID}/Students"] = NewGetStudentsOfClass(o.context, o.GetStudentsOfClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subject/{ID}/students"] = NewGetStudentsOfSubject(o.context, o.GetStudentsOfSubjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teacher/{ID}/students"] = NewGetStudentsOfTeacher(o.context, o.GetStudentsOfTeacherHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subject/{ID}"] = NewGetSubjectByID(o.context, o.GetSubjectByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subject"] = NewGetSubjects(o.context, o.GetSubjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/class/{ID}/subjects"] = NewGetSubjectsOfClass(o.context, o.GetSubjectsOfClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/student/{ID}/subjects"] = NewGetSubjectsOfStudent(o.context, o.GetSubjectsOfStudentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/account/teacher"] = NewGetTeacherAccounts(o.context, o.GetTeacherAccountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teacher/{ID}"] = NewGetTeacherByID(o.context, o.GetTeacherByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subject/{ID}/teacher"] = NewGetTeacherOfSubject(o.context, o.GetTeacherOfSubjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teacher"] = NewGetTeachers(o.context, o.GetTeachersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/class/{ID}/teachers"] = NewGetTeachersOfClass(o.context, o.GetTeachersOfClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/account"] = NewUpdateAccount(o.context, o.UpdateAccountHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/class/{ID}/name"] = NewUpdateClassName(o.context, o.UpdateClassNameHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/student/{ID}/gpa"] = NewUpdateGPA(o.context, o.UpdateGPAHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/student/{ID}/name"] = NewUpdateStudentName(o.context, o.UpdateStudentNameHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/subject/{ID}/name"] = NewUpdateSubjectName(o.context, o.UpdateSubjectNameHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/teacher/{ID}/name"] = NewUpdateTeacherName(o.context, o.UpdateTeacherNameHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ApniUniversityAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ApniUniversityAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ApniUniversityAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ApniUniversityAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ApniUniversityAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
