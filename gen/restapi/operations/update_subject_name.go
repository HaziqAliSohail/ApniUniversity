// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateSubjectNameHandlerFunc turns a function with the right signature into a update subject name handler
type UpdateSubjectNameHandlerFunc func(UpdateSubjectNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateSubjectNameHandlerFunc) Handle(params UpdateSubjectNameParams) middleware.Responder {
	return fn(params)
}

// UpdateSubjectNameHandler interface for that can handle valid update subject name params
type UpdateSubjectNameHandler interface {
	Handle(UpdateSubjectNameParams) middleware.Responder
}

// NewUpdateSubjectName creates a new http.Handler for the update subject name operation
func NewUpdateSubjectName(ctx *middleware.Context, handler UpdateSubjectNameHandler) *UpdateSubjectName {
	return &UpdateSubjectName{Context: ctx, Handler: handler}
}

/*
	UpdateSubjectName swagger:route PATCH /subject/{ID}/name updateSubjectName

UpdateSubjectName update subject name API
*/
type UpdateSubjectName struct {
	Context *middleware.Context
	Handler UpdateSubjectNameHandler
}

func (o *UpdateSubjectName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateSubjectNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateSubjectNameBody update subject name body
//
// swagger:model UpdateSubjectNameBody
type UpdateSubjectNameBody struct {

	// name
	Name string `json:"Name,omitempty"`
}

// Validate validates this update subject name body
func (o *UpdateSubjectNameBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subject name body based on context it is used
func (o *UpdateSubjectNameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubjectNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubjectNameBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubjectNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
