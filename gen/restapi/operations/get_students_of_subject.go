// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetStudentsOfSubjectHandlerFunc turns a function with the right signature into a get students of subject handler
type GetStudentsOfSubjectHandlerFunc func(GetStudentsOfSubjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStudentsOfSubjectHandlerFunc) Handle(params GetStudentsOfSubjectParams) middleware.Responder {
	return fn(params)
}

// GetStudentsOfSubjectHandler interface for that can handle valid get students of subject params
type GetStudentsOfSubjectHandler interface {
	Handle(GetStudentsOfSubjectParams) middleware.Responder
}

// NewGetStudentsOfSubject creates a new http.Handler for the get students of subject operation
func NewGetStudentsOfSubject(ctx *middleware.Context, handler GetStudentsOfSubjectHandler) *GetStudentsOfSubject {
	return &GetStudentsOfSubject{Context: ctx, Handler: handler}
}

/*
	GetStudentsOfSubject swagger:route GET /subject/{ID}/students getStudentsOfSubject

GetStudentsOfSubject get students of subject API
*/
type GetStudentsOfSubject struct {
	Context *middleware.Context
	Handler GetStudentsOfSubjectHandler
}

func (o *GetStudentsOfSubject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetStudentsOfSubjectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
