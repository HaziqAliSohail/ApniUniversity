// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetClassOfTeacherHandlerFunc turns a function with the right signature into a get class of teacher handler
type GetClassOfTeacherHandlerFunc func(GetClassOfTeacherParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClassOfTeacherHandlerFunc) Handle(params GetClassOfTeacherParams) middleware.Responder {
	return fn(params)
}

// GetClassOfTeacherHandler interface for that can handle valid get class of teacher params
type GetClassOfTeacherHandler interface {
	Handle(GetClassOfTeacherParams) middleware.Responder
}

// NewGetClassOfTeacher creates a new http.Handler for the get class of teacher operation
func NewGetClassOfTeacher(ctx *middleware.Context, handler GetClassOfTeacherHandler) *GetClassOfTeacher {
	return &GetClassOfTeacher{Context: ctx, Handler: handler}
}

/*
	GetClassOfTeacher swagger:route GET /teacher/{ID}/class getClassOfTeacher

GetClassOfTeacher get class of teacher API
*/
type GetClassOfTeacher struct {
	Context *middleware.Context
	Handler GetClassOfTeacherHandler
}

func (o *GetClassOfTeacher) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetClassOfTeacherParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
