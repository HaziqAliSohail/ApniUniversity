// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSubjectByIDHandlerFunc turns a function with the right signature into a get subject by ID handler
type GetSubjectByIDHandlerFunc func(GetSubjectByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSubjectByIDHandlerFunc) Handle(params GetSubjectByIDParams) middleware.Responder {
	return fn(params)
}

// GetSubjectByIDHandler interface for that can handle valid get subject by ID params
type GetSubjectByIDHandler interface {
	Handle(GetSubjectByIDParams) middleware.Responder
}

// NewGetSubjectByID creates a new http.Handler for the get subject by ID operation
func NewGetSubjectByID(ctx *middleware.Context, handler GetSubjectByIDHandler) *GetSubjectByID {
	return &GetSubjectByID{Context: ctx, Handler: handler}
}

/*
	GetSubjectByID swagger:route GET /subject/{ID} getSubjectById

GetSubjectByID get subject by ID API
*/
type GetSubjectByID struct {
	Context *middleware.Context
	Handler GetSubjectByIDHandler
}

func (o *GetSubjectByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSubjectByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
